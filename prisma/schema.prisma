// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  iaChats       IaChat[]
  tickets       Ticket[]
  orders        Order[]
  logs          Log[]
}

model IaChat {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  messages  Json     // Array de { role: "user" | "assistant", content: string, timestamp: string }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  subject   String
  status    String   @default("open") // "open" | "in_progress" | "closed"
  messages  Json     // Array de { sender: "user" | "admin", content: string, timestamp: string }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  image       String?   // URL de la imagen del producto
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  files       File[]
  orders      Order[]
  promotions  Promotion[]
}

model Order {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  download   Download?
  createdAt  DateTime @default(now())
  status     String   @default("pending") // pending, paid, cancelled
}

model Download {
  id        String   @id @default(uuid())
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id])
  fileId    String
  file      File     @relation(fields: [fileId], references: [id])
  createdAt DateTime @default(now())
}

model Promotion {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  discount    Float    // porcentaje de descuento (ej: 0.15 para 15%)
  active      Boolean  @default(true)
  productId   String?
  product     Product? @relation(fields: [productId], references: [id])
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
}

model File {
  id          String   @id @default(uuid())
  url         String
  name        String
  size        Int
  productId   String?
  product     Product? @relation(fields: [productId], references: [id])
  uploadedAt  DateTime @default(now())
  downloads   Download[]
}

model Log {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  details   String?
  createdAt DateTime @default(now())
}